name: Publish Documentation to Wiki

on:
  # Nur manuell ausführen, nicht bei Push
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update wiki'
        required: false
        default: 'false'

jobs:
  build-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout source repository
        run: |
          git clone https://github.com/${GITHUB_REPOSITORY}.git .
          git checkout $GITHUB_SHA
      
      - name: Setup Python
        run: |
          # Prüfe welche Python-Version verfügbar ist
          python_cmd=""
          for cmd in python3.12 python3.11 python3.10 python3.9 python3; do
            if command -v $cmd &> /dev/null; then
              python_cmd=$cmd
              echo "Using $python_cmd"
              break
            fi
          done
          
          if [ -z "$python_cmd" ]; then
            echo "No suitable Python version found, installing Python 3"
            sudo apt-get update
            sudo apt-get install -y python3 python3-dev python3-venv
            python_cmd="python3"
          fi
          
          # Erstelle virtuelle Umgebung
          $python_cmd -m venv venv
          source venv/bin/activate
          python --version
          echo "PATH=$PATH" >> $GITHUB_ENV
      
      - name: Install Sphinx dependencies
        run: |
          # Aktiviere die Python-Umgebung
          source venv/bin/activate
          
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme myst-parser sphinx-markdown-builder
      
      - name: Build Sphinx documentation
        run: |
          # Aktiviere die Python-Umgebung
          source venv/bin/activate
          
          cd docs
          
          # Standard HTML-Dokumentation erstellen
          sphinx-build -b html . _build/html
          
          # Markdown für Wiki erstellen
          sphinx-build -b markdown . _build/markdown
          
          echo "Sphinx documentation built successfully"
      
      # Speichern der Dokumentation im Repository
      - name: Store documentation in repository
        run: |
          # Verzeichnis erstellen, falls nicht vorhanden
          mkdir -p generated_docs
          
          # HTML-Dokumentation kopieren
          cp -r docs/_build/html generated_docs/html
          
          # Markdown-Dokumentation kopieren
          cp -r docs/_build/markdown generated_docs/markdown
          
          # Git konfigurieren
          git config user.name "Leon Kaiser"
          git config user.email "leon.kaiser@example.com"
          
          # Änderungen committen
          git add generated_docs
          git commit -m "Update generated documentation"
          
          # Änderungen pushen
          git push origin $GITHUB_REF_NAME
      
      - name: Setup Git for Wiki
        run: |
          git config --global user.name "Leon Kaiser"
          git config --global user.email "leon.kaiser@example.com"

      - name: Check if Wiki exists and clone it
        id: check-wiki
        run: |
          # Versuche, das Wiki-Repository zu klonen
          REPO_SLUG=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
          if git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO_SLUG}.wiki.git" wiki-repo; then
            echo "Wiki exists and was cloned successfully"
            echo "wiki_exists=true" >> $GITHUB_OUTPUT
            echo "true" > /tmp/wiki_exists
          else
            echo "Wiki does not exist or couldn't be cloned"
            echo "wiki_exists=false" >> $GITHUB_OUTPUT
            echo "false" > /tmp/wiki_exists
          fi
      
      - name: Create Wiki if it doesn't exist
        if: steps.check-wiki.outputs.wiki_exists == 'false'
        run: |
          echo "::warning::Wiki repository doesn't exist yet. Please create the wiki manually first."
          echo "To create the wiki:"
          echo "1. Go to your repository on GitHub: https://github.com/$GITHUB_REPOSITORY"
          echo "2. Click on the 'Wiki' tab"
          echo "3. Click 'Create the first page'"
          echo "4. Add some content (e.g., 'Initial wiki page')"
          echo "5. Click 'Save Page'"
          echo "6. Then re-run this workflow"
          
          # Create a directory for the output to avoid errors in later steps
          mkdir -p wiki-repo
          exit 0
      
      - name: Prepare Wiki content
        if: steps.check-wiki.outputs.wiki_exists == 'true'
        run: |
          # Kopiere Markdown-Dateien ins Wiki-Verzeichnis
          cp -r docs/_build/markdown/* wiki-repo/
          
          # Home.md als Einstiegsseite erstellen
          cat > wiki-repo/Home.md << 'EOF'
          # SimOS NV Simulator Documentation

          Welcome to the documentation for the SimOS NV Simulator, a comprehensive quantum simulator for NV centers in diamond.

          *Developed by Leon Kaiser*

          ## Contents

          ### Core Documentation
          
          - [Module Overview](index.html)
          - [Physical Model](physical_model.html)
          - [API Reference](api_reference.html)
          
          ### Getting Started
          
          - [Installation & Setup](Installation-&-Setup)
          - [Quick Start Guide](Quick-Start-Guide)
          - [Configuration](Configuration)
          
          ### Development
          
          - [Contributing](Contributing)
          - [Code Style](Code-Style)
          - [Testing](Testing)
          EOF
          
          # Pfade anpassen für Wiki-Links
          find wiki-repo -name "*.md" -type f -print0 | xargs -0 sed -i 's/\.html)/)/g'
          find wiki-repo -name "*.md" -type f -print0 | xargs -0 sed -i 's/\.html#/-/g'
          
          # Wiki-Sidebar erstellen
          cat > wiki-repo/_Sidebar.md << 'EOF'
          ### Documentation
          
          * [Home](Home)
          * [Module Overview](index)
          * [Physical Model](physical_model)
          * [API Reference](api_reference)
          
          ### Examples
          
          * [Basic Usage](physical_model#basic-usage)
          * [Configuration](physical_model#configuration)
          * [Advanced Examples](physical_model#advanced-examples)
          EOF
          
          # Wiki-Footer erstellen
          cat > wiki-repo/_Footer.md << 'EOF'
          *Documentation generated with Sphinx by Leon Kaiser*
          EOF
      
      - name: Publish to Wiki
        if: steps.check-wiki.outputs.wiki_exists == 'true'
        run: |
          cd wiki-repo
          
          # Überprüfe auf Änderungen
          if git status --porcelain | grep .; then
            # Alle Änderungen hinzufügen und committen
            git add .
            git commit -m "Update documentation from commit ${{ github.sha }} by Leon Kaiser"
            
            echo "Pushing changes to wiki repository..."
            
            # Push zu master (Standard für Wiki-Repos)
            git push origin master
            
            echo "Documentation successfully updated in the wiki!"
          else
            echo "No changes to commit"
          fi
      
      # Statt Upload-Artifact verwenden wir eine einfache Zusammenfassung
      - name: Show documentation summary
        run: |
          echo "## Dokumentation erfolgreich erstellt und eingesetzt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Die folgenden Aktionen wurden durchgeführt:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Sphinx-Dokumentation wurde generiert" >> $GITHUB_STEP_SUMMARY
          echo "- Dokumentation wurde im Repository-Verzeichnis \`generated_docs\` gespeichert" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "/tmp/wiki_exists" ] && [ "$(cat /tmp/wiki_exists)" == "true" ]; then
            echo "- Dokumentation wurde ins GitHub Wiki hochgeladen" >> $GITHUB_STEP_SUMMARY
            echo "  - Du kannst das Wiki hier ansehen: https://github.com/$GITHUB_REPOSITORY/wiki" >> $GITHUB_STEP_SUMMARY
          else
            echo "- GitHub Wiki existiert noch nicht - bitte erstelle es manuell" >> $GITHUB_STEP_SUMMARY
            echo "  - Gehe zu https://github.com/$GITHUB_REPOSITORY/wiki" >> $GITHUB_STEP_SUMMARY
            echo "  - Erstelle die erste Seite" >> $GITHUB_STEP_SUMMARY
            echo "  - Führe diesen Workflow erneut aus" >> $GITHUB_STEP_SUMMARY
          fi