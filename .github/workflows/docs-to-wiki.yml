name: Publish Documentation to Wiki

on:
  # Nur manuell ausführen, nicht bei Push
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update wiki'
        required: false
        default: 'false'

jobs:
  build-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout source repository
        run: |
          git clone https://github.com/${GITHUB_REPOSITORY}.git .
          git checkout $GITHUB_SHA
      
      - name: Setup Python
        run: |
          # Prüfe welche Python-Version verfügbar ist
          python_cmd=""
          for cmd in python3.12 python3.11 python3.10 python3.9 python3; do
            if command -v $cmd &> /dev/null; then
              python_cmd=$cmd
              echo "Using $python_cmd"
              break
            fi
          done
          
          if [ -z "$python_cmd" ]; then
            echo "No suitable Python version found, installing Python 3"
            sudo apt-get update
            sudo apt-get install -y python3 python3-dev python3-venv
            python_cmd="python3"
          fi
          
          # Erstelle virtuelle Umgebung
          $python_cmd -m venv venv
          source venv/bin/activate
          python --version
          echo "PATH=$PATH" >> $GITHUB_ENV
      
      - name: Install Sphinx dependencies
        run: |
          # Aktiviere die Python-Umgebung
          source venv/bin/activate
          
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme myst-parser sphinx-markdown-builder
      
      - name: Build Sphinx documentation
        run: |
          # Aktiviere die Python-Umgebung
          source venv/bin/activate
          
          cd docs
          
          # Standard HTML-Dokumentation erstellen
          sphinx-build -b html . _build/html
          
          # Markdown für Wiki erstellen
          sphinx-build -b markdown . _build/markdown
          
          echo "Sphinx documentation built successfully"
      
      # Speichern der Dokumentation im Repository
      - name: Store documentation in repository
        run: |
          # Verzeichnis erstellen, falls nicht vorhanden
          mkdir -p generated_docs
          
          # HTML-Dokumentation kopieren
          cp -r docs/_build/html generated_docs/html
          
          # Markdown-Dokumentation kopieren
          cp -r docs/_build/markdown generated_docs/markdown
          
          # Git konfigurieren
          git config user.name "Leon Kaiser"
          git config user.email "leon.kaiser@example.com"
          
          # Änderungen committen
          git add generated_docs
          git commit -m "Update generated documentation"
          
          # Änderungen pushen mit Token
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git push origin $GITHUB_REF_NAME || echo "Could not push to repository - documentation is still generated locally"
      
      - name: Setup Git for Wiki
        run: |
          git config --global user.name "Leon Kaiser"
          git config --global user.email "leon.kaiser@example.com"

      - name: Check if Wiki exists and clone it
        id: check-wiki
        run: |
          # Versuche, das Wiki-Repository zu klonen
          REPO_SLUG=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
          if git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO_SLUG}.wiki.git" wiki-repo; then
            echo "Wiki exists and was cloned successfully"
            echo "wiki_exists=true" >> $GITHUB_OUTPUT
            echo "true" > /tmp/wiki_exists
          else
            echo "Wiki does not exist or couldn't be cloned"
            echo "wiki_exists=false" >> $GITHUB_OUTPUT
            echo "false" > /tmp/wiki_exists
          fi
      
      - name: Create Wiki if it doesn't exist
        if: steps.check-wiki.outputs.wiki_exists == 'false'
        run: |
          echo "::warning::Wiki repository doesn't exist yet. Please create the wiki manually first."
          echo "To create the wiki:"
          echo "1. Go to your repository on GitHub: https://github.com/$GITHUB_REPOSITORY"
          echo "2. Click on the 'Wiki' tab"
          echo "3. Click 'Create the first page'"
          echo "4. Add some content (e.g., 'Initial wiki page')"
          echo "5. Click 'Save Page'"
          echo "6. Then re-run this workflow"
          
          # Create a directory for the output to avoid errors in later steps
          mkdir -p wiki-repo
          exit 0
      
      - name: Prepare Wiki content
        if: steps.check-wiki.outputs.wiki_exists == 'true'
        run: |
          # Create clean wiki directory to organize pages
          rm -rf wiki-pages
          mkdir -p wiki-pages
          
          # Lösche vorhandene Wiki-Dateien, um sauberen Start zu haben
          rm -rf wiki-repo/*.md
          
          # Home.md als Einstiegsseite erstellen (direkt ins Wiki-Repo)
          cat > wiki-repo/Home.md << 'EOF'
          # SimOS NV Simulator Documentation

          Welcome to the documentation for the SimOS NV Simulator, a comprehensive quantum simulator for NV centers in diamond.

          *Developed by Leon Kaiser*

          ## Core Documentation
          
          - [Module Overview](Module-Overview)
          - [Physical Model](Physical-Model)
          - [API Reference](API-Reference)
          
          ## Getting Started
          
          - [Installation and Setup](Installation-and-Setup)
          - [Quick Start Guide](Quick-Start-Guide)
          - [Configuration](Configuration)
          
          ## Development
          
          - [Contributing](Contributing)
          - [Code Style](Code-Style)
          - [Testing](Testing)
          EOF
          
          # Create individual pages with proper titles
          
          # Module Overview page
          cat > wiki-pages/Module-Overview.md << 'EOF'
          # Module Overview

          *Developed by Leon Kaiser*

          EOF
          cat docs/_build/markdown/index.md | tail -n +2 >> wiki-pages/Module-Overview.md
          
          # Physical Model page
          cat > wiki-pages/Physical-Model.md << 'EOF'
          # Physical Model

          *Developed by Leon Kaiser*

          EOF
          cat docs/_build/markdown/physical_model.md | tail -n +2 >> wiki-pages/Physical-Model.md
          
          # API Reference page
          cat > wiki-pages/API-Reference.md << 'EOF'
          # API Reference

          *Developed by Leon Kaiser*

          EOF
          cat docs/_build/markdown/api_reference.md | tail -n +2 >> wiki-pages/API-Reference.md
          
          # Placeholder pages for Getting Started section
          cat > wiki-pages/Installation-and-Setup.md << 'EOF'
          # Installation & Setup

          *Developed by Leon Kaiser*

          ## Requirements

          - Python 3.9 or higher
          - NumPy
          - SciPy
          - Optional: SimOS package

          ## Installation Steps

          ```bash
          # Clone the repository
          git clone https://github.com/xleonplayz/IQ0-q.git
          cd IQ0-q
          
          # Install in development mode
          pip install -e .
          ```

          ## Verification

          To verify your installation:

          ```python
          from simos_nv_simulator.core.physical_model import PhysicalNVModel
          
          # Create model instance
          model = PhysicalNVModel()
          print("Installation successful!")
          ```
          EOF
          
          cat > wiki-pages/Quick-Start-Guide.md << 'EOF'
          # Quick Start Guide

          *Developed by Leon Kaiser*
          
          This guide provides simple examples to get started with the SimOS NV Simulator.

          ## Basic Simulation

          ```python
          from simos_nv_simulator.core.physical_model import PhysicalNVModel

          # Create NV model with default parameters
          nv = PhysicalNVModel()

          # Set magnetic field (in Tesla)
          nv.set_magnetic_field([0, 0, 0.005])

          # Apply microwave drive
          nv.apply_microwave(frequency=2.87e9, power=-20.0, on=True)

          # Run simulation for 1 microsecond
          nv.simulate(dt=1e-9, steps=1000)

          # Get fluorescence count rate
          counts = nv.get_fluorescence()
          print(f"Fluorescence counts: {counts}")
          ```

          ## Running a Simple Experiment

          ```python
          from simos_nv_simulator.core.physical_model import PhysicalNVModel

          # Create model
          nv = PhysicalNVModel()

          # Set up Rabi oscillation experiment
          resonance_frequency = 2.87e9  # Hz
          mw_powers = [-20, -15, -10, -5, 0]  # dBm
          results = {}

          # Perform experiment with different powers
          for power in mw_powers:
              nv.reset_state()
              nv.apply_microwave(frequency=resonance_frequency, power=power, on=True)
              
              # Simulate for 1 microsecond with 100 time points
              result = nv.simulate_state_evolution(max_time=1e-6, num_points=100)
              
              # Store result
              results[power] = result.populations['ms0']
              
          # Plot results (requires matplotlib)
          import matplotlib.pyplot as plt
          
          plt.figure(figsize=(10, 6))
          for power, pop in results.items():
              plt.plot(result.times * 1e9, pop, label=f"{power} dBm")
              
          plt.xlabel('Time (ns)')
          plt.ylabel('ms=0 Population')
          plt.title('Rabi Oscillations vs Microwave Power')
          plt.legend()
          plt.grid(True)
          plt.show()
          ```
          EOF
          
          cat > wiki-pages/Configuration.md << 'EOF'
          # Configuration

          *Developed by Leon Kaiser*
          
          The simulator can be configured with various parameters to model different NV center environments.

          ## Basic Configuration

          ```python
          model = PhysicalNVModel({
              'zero_field_splitting': 2.87e9,  # Hz
              'gyromagnetic_ratio': 28.0e9,    # Hz/T
              'T1': 1e-3,                      # seconds
              'T2': 1e-6,                      # seconds
              'strain_e': 0.0,                 # Strain parameter E
              'strain_d': 0.0,                 # Strain parameter D
              'temperature': 298,              # Kelvin
          })
          ```

          ## Available Configuration Parameters

          | Parameter | Description | Default Value | Units |
          |-----------|-------------|--------------|-------|
          | `zero_field_splitting` | D term in Hamiltonian | 2.87e9 | Hz |
          | `gyromagnetic_ratio` | Electron gyromagnetic ratio | 28.0e9 | Hz/T |
          | `T1` | Longitudinal relaxation time | 1e-3 | seconds |
          | `T2` | Transverse relaxation time | 1e-6 | seconds |
          | `T2_star` | Inhomogeneous dephasing time | 0.5e-6 | seconds |
          | `strain_e` | E strain component | 0.0 | Hz |
          | `strain_d` | D strain component | 0.0 | Hz |
          | `temperature` | Operating temperature | 298 | Kelvin |
          | `excitation_saturation_power` | Laser power for saturation | 10.0 | mW |
          | `optical_transition_time` | Time for ground to excited transitions | 10e-9 | seconds |
          | `excited_state_lifetime` | Lifetime of excited state | 12e-9 | seconds |
          | `fluorescence_rate_ms0` | Photon count rate for ms=0 | 250e3 | counts/s |
          | `fluorescence_rate_ms1` | Photon count rate for ms=±1 | 150e3 | counts/s |
          | `background_count_rate` | Background fluorescence | 10e3 | counts/s |
          | `decoherence_model` | Model type for decoherence | "markovian" | string |
          | `include_nitrogen_nucleus` | Include N14/N15 nucleus | False | boolean |
          | `nitrogen_isotope` | Nitrogen isotope | 14 | integer |
          
          ## Advanced Configuration Examples

          ### High-Fidelity NV

          ```python
          high_fidelity_nv = PhysicalNVModel({
              'T1': 10e-3,                # 10 ms T1
              'T2': 2e-3,                 # 2 ms T2
              'T2_star': 5e-6,            # 5 μs T2*
              'strain_e': 1e6,            # 1 MHz strain
              'temperature': 10,          # 10 K (cryogenic)
              'decoherence_model': "non-markovian"
          })
          ```

          ### Room Temperature NV

          ```python
          room_temp_nv = PhysicalNVModel({
              'T1': 1e-3,                 # 1 ms T1
              'T2': 0.5e-6,               # 500 ns T2
              'T2_star': 0.1e-6,          # 100 ns T2*
              'temperature': 298,         # 298 K (room temperature)
              'background_count_rate': 20e3 # Higher background counts
          })
          ```
          EOF
          
          # Development pages
          cat > wiki-pages/Contributing.md << 'EOF'
          # Contributing

          *Developed by Leon Kaiser*
          
          Thank you for your interest in contributing to the SimOS NV Simulator project. This page provides guidance on how to contribute effectively.

          ## Development Setup

          1. Fork the repository on GitHub
          2. Clone your fork locally
          3. Install development dependencies:
             ```bash
             pip install -e ".[dev]"
             ```
          4. Create a new branch for your feature or bugfix

          ## Code Style

          This project follows PEP 8 with some modifications:
          - Line length limit: 100 characters
          - Use type annotations for parameters and return values
          - Documentation follows NumPy style

          ## Testing

          All new code should include appropriate tests:
          ```bash
          # Run all tests
          pytest tests/
          
          # Run specific test file
          pytest tests/core/test_physical_model.py
          
          # Run with coverage
          pytest --cov=simos_nv_simulator tests/
          ```

          ## Pull Request Process

          1. Ensure all tests pass
          2. Update documentation as needed
          3. Add your changes to the CHANGELOG.md file
          4. Submit a pull request with a clear description of the changes
          EOF
          
          cat > wiki-pages/Code-Style.md << 'EOF'
          # Code Style

          *Developed by Leon Kaiser*
          
          This project follows specific code style guidelines to maintain consistency and quality.

          ## Python Style Guide

          - Follow PEP 8 for general Python style
          - Use snake_case for functions and variables
          - Use CamelCase for classes
          - Add docstrings to all public methods and functions

          ## Naming Conventions

          - Class names: `CamelCase`
          - Function/method names: `snake_case`
          - Constants: `UPPER_CASE`
          - Private methods/attributes: `_prefixed_with_underscore`

          ## Documentation Style

          Example of properly documented function:

          ```python
          def apply_magnetic_field(self, field_vector: List[float]) -> None:
              """
              Apply a magnetic field to the NV center.
              
              Parameters
              ----------
              field_vector : List[float]
                  3D vector of magnetic field in [Bx, By, Bz] format, measured in Tesla
                  
              Returns
              -------
              None
                  
              Examples
              --------
              >>> model = PhysicalNVModel()
              >>> model.apply_magnetic_field([0, 0, 0.001])  # Apply 1 mT along z-axis
              """
              # Implementation...
          ```

          ## Import Structure

          Organize imports in the following order:
          1. Standard library imports
          2. Third-party library imports
          3. Local application imports

          Example:
          ```python
          # Standard library
          import os
          import sys
          from typing import List, Dict, Optional
          
          # Third-party
          import numpy as np
          from scipy import linalg
          
          # Local application
          from simos_nv_simulator.core import utils
          from simos_nv_simulator.config import settings
          ```
          EOF
          
          cat > wiki-pages/Testing.md << 'EOF'
          # Testing

          *Developed by Leon Kaiser*
          
          Testing is a critical part of maintaining code quality. This project uses pytest for testing.

          ## Running Tests

          ```bash
          # Run all tests
          pytest tests/
          
          # Run tests in a specific file
          pytest tests/core/test_physical_model.py
          
          # Run a specific test
          pytest tests/core/test_physical_model.py::TestPhysicalNVModel::test_zeeman_splitting
          
          # Run with coverage
          pytest --cov=simos_nv_simulator tests/
          ```

          ## Test Structure

          Tests are organized to match the package structure:
          
          ```
          tests/
          ├── core/
          │   ├── test_physical_model.py
          │   ├── test_quantum_evolution.py
          │   └── test_zeeman_effect.py
          ├── interfaces/
          │   └── test_qudi_interface.py
          └── utils/
              └── test_helpers.py
          ```

          ## Writing Tests

          All tests should:
          - Be independent of each other
          - Clean up any resources they create
          - Have descriptive names that indicate what they're testing
          - Include assertions that validate the expected behavior

          Example test:

          ```python
          def test_zeeman_splitting():
              """Test that Zeeman splitting is proportional to magnetic field."""
              model = PhysicalNVModel()
              
              # Apply different magnetic fields
              field_strengths = [0.0, 0.001, 0.002, 0.005]  # Tesla
              splitting_values = []
              
              for b_field in field_strengths:
                  # Apply field along z-axis
                  model.apply_magnetic_field([0, 0, b_field])
                  
                  # Get energy levels
                  energy = model.get_energy_levels()
                  
                  # Calculate splitting between ms=0 and ms=+1
                  splitting = energy['ms_plus'] - energy['ms0']
                  splitting_values.append(splitting)
              
              # Verify linear relationship with field strength
              for i in range(1, len(field_strengths)):
                  ratio = splitting_values[i] / splitting_values[1]
                  expected_ratio = field_strengths[i] / field_strengths[1]
                  assert abs(ratio - expected_ratio) < 0.01
          ```
          EOF
          
          # Copy all pages to wiki repo
          cp wiki-pages/*.md wiki-repo/
          
          # Wiki-Sidebar erstellen
          cat > wiki-repo/_Sidebar.md << 'EOF'
          ### Documentation
          
          * [Home](Home)
          * [Module Overview](Module-Overview)
          * [Physical Model](Physical-Model)
          * [API Reference](API-Reference)
          
          ### Getting Started
          
          * [Installation and Setup](Installation-and-Setup)
          * [Quick Start Guide](Quick-Start-Guide)
          * [Configuration](Configuration)
          
          ### Development
          
          * [Contributing](Contributing)
          * [Code Style](Code-Style)
          * [Testing](Testing)
          EOF
          
          # Wiki-Footer erstellen
          cat > wiki-repo/_Footer.md << 'EOF'
          *Documentation generated with Sphinx by Leon Kaiser*
          EOF
      
      - name: Publish to Wiki
        if: steps.check-wiki.outputs.wiki_exists == 'true'
        run: |
          cd wiki-repo
          
          # Führe eine gründliche Bereinigung der Dateien durch
          # Entferne alle versteckten Zeichen oder BOM-Marker
          for file in *.md; do
            # Entferne BOM-Marker und andere versteckte Zeichen
            CONTENT=$(cat "$file")
            echo "$CONTENT" > "$file".tmp
            mv "$file".tmp "$file"
            # Stelle sicher, dass Datei mit einem einzigen Titel beginnt
            FIRST_LINE=$(head -n 1 "$file")
            if [[ ! "$FIRST_LINE" =~ ^#\ .* ]]; then
              echo "Fixing header in $file"
              NAME=$(echo "$file" | sed 's/\.md$//' | sed 's/-/ /g')
              echo -e "# $NAME\n\n$(cat "$file")" > "$file"
            fi
          done
          
          echo "Files prepared for wiki. Current status:"
          for file in *.md; do
            echo "- $file: $(head -n 1 "$file")"
          done
          
          # Überprüfe auf Änderungen
          if git status --porcelain | grep .; then
            # Alle Änderungen hinzufügen und committen
            git add *.md
            git commit -m "Update documentation from commit ${{ github.sha }} by Leon Kaiser"
            
            echo "Pushing changes to wiki repository..."
            
            # Push zu master (Standard für Wiki-Repos) mit Token
            REPO_SLUG=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO_SLUG}.wiki.git"
            git push origin master
            
            echo "Documentation successfully updated in the wiki!"
          else
            echo "No changes to commit"
          fi
      
      # Statt Upload-Artifact verwenden wir eine einfache Zusammenfassung
      - name: Show documentation summary
        run: |
          echo "## Dokumentation erfolgreich erstellt und eingesetzt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Die folgenden Aktionen wurden durchgeführt:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Sphinx-Dokumentation wurde generiert" >> $GITHUB_STEP_SUMMARY
          echo "- Dokumentation wurde im Repository-Verzeichnis \`generated_docs\` gespeichert" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "/tmp/wiki_exists" ] && [ "$(cat /tmp/wiki_exists)" == "true" ]; then
            echo "- Dokumentation wurde ins GitHub Wiki hochgeladen" >> $GITHUB_STEP_SUMMARY
            echo "  - Du kannst das Wiki hier ansehen: https://github.com/$GITHUB_REPOSITORY/wiki" >> $GITHUB_STEP_SUMMARY
          else
            echo "- GitHub Wiki existiert noch nicht - bitte erstelle es manuell" >> $GITHUB_STEP_SUMMARY
            echo "  - Gehe zu https://github.com/$GITHUB_REPOSITORY/wiki" >> $GITHUB_STEP_SUMMARY
            echo "  - Erstelle die erste Seite" >> $GITHUB_STEP_SUMMARY
            echo "  - Führe diesen Workflow erneut aus" >> $GITHUB_STEP_SUMMARY
          fi