# NV Simulator Configuration File for Qudi with Dummy Modules
# This version uses dummy modules enhanced with NV simulator capabilities

global:
    # list of modules to load when starting
    startup_modules: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    default_data_dir: ~/qudi-data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
    odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'

    scanner_gui:
        module.Class: 'scanning.scannergui.ScannerGui'
        connect:
            scanning_logic: scanning_probe_logic
            data_logic: scanning_data_logic
            optimize_logic: scanning_optimize_logic

logic:
    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        options:
            default_scan_mode: 'JUMP_LIST'
        connect:
            microwave: 'microwave_dummy'
            data_scanner: 'finite_sampling_input_dummy'

    scanning_probe_logic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        options:
            max_history_length: 20
            max_scan_update_interval: 2
            position_update_interval: 1
        connect:
            scanner: scanning_probe_dummy

    scanning_data_logic:
        module.Class: 'scanning_data_logic.ScanningDataLogic'
        options:
            max_history_length: 20
        connect:
            scan_logic: scanning_probe_logic

    scanning_optimize_logic:
        module.Class: 'scanning_optimize_logic.ScanningOptimizeLogic'
        connect:
            scan_logic: scanning_probe_logic

hardware:
    # Enhanced microwave dummy with NV simulation capabilities
    microwave_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'
        options:
            use_nv_simulator: True
            magnetic_field: [0, 0, 500]  # Gauss, [x, y, z]
            temperature: 300  # Kelvin
    
    # Enhanced finite sampler dummy with NV simulation capabilities
    finite_sampling_input_dummy:
        module.Class: 'dummy.finite_sampling_input_dummy.FiniteSamplingInputDummy'
        options:
            simulation_mode: 'ODMR'
            sample_rate_limits: [1, 1e6]
            frame_size_limits: [1, 1e9]
            channel_units:
                'APD counts': 'c/s'
                'Photodiode': 'V'
            use_nv_simulator: True
            magnetic_field: [0, 0, 500]  # Gauss, [x, y, z]
            temperature: 300  # Kelvin
    
    # Scanning probe dummy  
    scanning_probe_dummy:
        module.Class: 'dummy.scanning_probe_dummy.ScanningProbeDummy'
        options:
            position_ranges:
                x: [0, 100e-6]
                y: [0, 100e-6]
                z: [-50e-6, 50e-6]
            frequency_ranges:
                x: [1, 1000]
                y: [1, 1000]
                z: [1, 500]
            resolution_ranges:
                x: [1, 1000]
                y: [1, 1000]
                z: [2, 500]
            position_accuracy:
                x: 10e-9
                y: 10e-9
                z: 50e-9
            channel_names:
                - 'APD counts'
                - 'Photodiode'