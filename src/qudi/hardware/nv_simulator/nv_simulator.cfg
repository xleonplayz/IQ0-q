# NV Simulator Configuration File for Qudi

global:
    # Define logging level
    logLevel: INFO
    
    # Define remote modules to be shared
    shared_modules: []
    
hardware:
    # NV Simulator Microwave Device
    nv_sim_microwave:
        module.Class: 'nv_simulator.microwave_device.NVSimMicrowaveDevice'
        options:
            magnetic_field: [0, 0, 300]  # Gauss, optional, [x, y, z]
            temperature: 300  # Kelvin, optional
            fixed_startup_time: 0.2  # seconds, time to simulate hardware startup delay
    
    # NV Simulator Fast Counter (for time-resolved measurements)
    nv_sim_fastcounter:
        module.Class: 'nv_simulator.fast_counter.NVSimFastCounter'
        options:
            gated: False
            photon_rate: 100000  # Simulated maximum photon count rate in cps
            noise_factor: 0.1    # Relative amplitude of Poisson noise
            dark_counts: 200     # Dark counts per second
            time_jitter: 0.5e-9  # Timing jitter in seconds
            t1: 5.5e-6           # T1 relaxation time in seconds
            t2: 2.0e-6           # T2 coherence time in seconds
    
    # NV Simulator Pulser (for pulse sequences)
    nv_sim_pulser:
        module.Class: 'nv_simulator.pulser.NVSimPulser'
        options:
            force_sequence_option: False
            save_samples: False
            laser_channel: 'd_ch1'
            microwave_channel: 'd_ch2'
            default_sample_rate: 1.0e9
    
    # NV Simulator Scanning Probe (for confocal microscopy)
    nv_sim_scanner:
        module.Class: 'nv_simulator.scanning_probe.NVSimScanningProbe'
        options:
            position_ranges:
                x: [0, 100e-6]
                y: [0, 100e-6]
                z: [-50e-6, 50e-6]
            frequency_ranges:
                x: [1, 1000]
                y: [1, 1000]
                z: [1, 500]
            resolution_ranges:
                x: [1, 1000]
                y: [1, 1000]
                z: [2, 500]
            position_accuracy:
                x: 10e-9
                y: 10e-9
                z: 50e-9
            nv_density: 1e15  # NV density in 1/m^3
    
    # NV Simulator Laser
    nv_sim_laser:
        module.Class: 'nv_simulator.laser.NVSimLaser'
        options:
            wavelength: 532  # Laser wavelength in nm
            max_power: 100.0  # Maximum laser power in mW
            power_noise: 0.01  # Relative power noise

logic:
    # ODMR Logic
    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: nv_sim_microwave
            fitlogic: fit_logic
            savelogic: save_logic
            scannerlogic: scanner_logic

    # Laser Logic
    laser_logic:
        module.Class: 'laser_logic.LaserLogic'
        connect:
            laser: nv_sim_laser
            savelogic: save_logic

    # Scanning Logic
    scanner_logic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        connect:
            scanning_probe: nv_sim_scanner
            savelogic: save_logic

    # Pulsed Measurement Logic
    pulsed_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsegenerator: nv_sim_pulser
            fastcounter: nv_sim_fastcounter
            fitlogic: fit_logic
            savelogic: save_logic
            microwave: nv_sim_microwave

    # Additional required logic modules
    fit_logic:
        module.Class: 'fit_logic.FitLogic'
        
    save_logic:
        module.Class: 'save_logic.SaveLogic'
        options:
            win_data_directory: 'C:/Data'
            unix_data_directory: '$HOME/Data'
            log_into_daily_directory: True
            save_pdf: True
            save_png: True

gui:
    # Main GUI
    main_gui:
        module.Class: 'main_gui.MainGui'
        connect:
            savelogic: save_logic

    # ODMR GUI
    odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmrlogic: odmr_logic
            savelogic: save_logic

    # Scanning GUI
    scanning_gui:
        module.Class: 'scanning.scannergui.ScannerGui'
        connect:
            scanninglogic: scanner_logic
            savelogic: save_logic
            optimizerlogic: optimizer_logic

    # Pulsed GUI
    pulsed_gui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: pulsed_logic

    # Laser GUI
    laser_gui:
        module.Class: 'laser.laser_gui.LaserGui'
        connect:
            laserlogic: laser_logic