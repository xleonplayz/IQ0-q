# NV Simulator Configuration File for Qudi

global:
    # list of modules to load when starting
    startup_modules: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    default_data_dir: /Users/leonkaiser/qudi-data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
    time_series_gui:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        options:
            use_antialias: True  # optional, set to False if you encounter performance issues
        connect:
            _time_series_logic_con: time_series_reader_logic

    scanner_gui:
        module.Class: 'scanning.scannergui.ScannerGui'
        connect:
            scanning_logic: scanning_probe_logic
            data_logic: scanning_data_logic
            optimize_logic: scanning_optimize_logic

    poi_manager_gui:
        module.Class: 'poimanager.poimanagergui.PoiManagerGui'
        options:
            data_scan_axes: xy  #optional, default: xy
        connect:
            poi_manager_logic: 'poi_manager_logic'

    camera_gui:
        module.Class: 'camera.cameragui.CameraGui'
        connect:
            camera_logic: camera_logic

    laser_gui:
        module.Class: 'laser.laser_gui.LaserGui'
        connect:
            laser_logic: laser_logic

    odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'

    switch_gui:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switch_logic'

    pulsed_gui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsed_master_logic'

    qdplot_gui:
        module.Class: 'qdplot.qdplot_gui.QDPlotterGui'
        connect:
            qdplot_logic: 'qdplot_logic'

    spectrometer:
        module.Class: 'spectrometer.spectrometer_gui.SpectrometerGui'
        connect:
            spectrometer_logic: 'spectrometerlogic'

    pid_gui:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pid_logic: pid_logic

logic:
    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        options:
            max_frame_rate: 20  # optional (default: 20Hz)
            channel_buffer_size: 1048576  # optional (default: 1MSample)
            max_raw_data_bytes: 1073741824  # optional (default: 1GB)
        connect:
            streamer: instream_dummy

    scanning_probe_logic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        options:
            max_history_length: 20
            max_scan_update_interval: 2
            position_update_interval: 1
        connect:
            scanner: nv_sim_scanner

    scanning_data_logic:
        module.Class: 'scanning_data_logic.ScanningDataLogic'
        options:
            max_history_length: 20
        connect:
            scan_logic: scanning_probe_logic

    scanning_optimize_logic:
        module.Class: 'scanning_optimize_logic.ScanningOptimizeLogic'
        connect:
            scan_logic: scanning_probe_logic

    poi_manager_logic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scanning_logic: 'scanning_probe_logic'
            optimize_logic: 'scanning_optimize_logic'
            data_logic: 'scanning_data_logic'

    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            camera: 'camera_dummy'

    laser_logic:
        module.Class: 'laser_logic.LaserLogic'
        options:
            query_interval: 0.1
        connect:
            laser: 'nv_sim_laser'

    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: 'nv_sim_microwave'
            data_scanner: 'nv_sim_finite_sampler'

    switch_logic:
        module.Class: 'switch_logic.SwitchLogic'
        options:
            watchdog_interval: 1
            autostart_watchdog: True
        connect:
            switch: 'switch_dummy'

    pulsed_master_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsed_measurement_logic'
            sequencegeneratorlogic: 'sequence_generator_logic'

    sequence_generator_logic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        connect:
            pulsegenerator: 'nv_sim_pulser'

    pulsed_measurement_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        options:
            raw_data_save_type: 'text'
        connect:
            fastcounter: 'nv_sim_fastcounter'
            pulsegenerator: 'nv_sim_pulser'

    qdplot_logic:
        module.Class: 'qdplot_logic.QDPlotLogic'

    spectrometerlogic:
        module.Class: 'spectrometer_logic.SpectrometerLogic'
        connect:
            spectrometer: 'spectrometer_dummy'

    pid_logic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            controller: 'softpid'
        options:
            timestep: 0.1

    softpid:
        module.Class: 'software_pid_controller.SoftPIDController'
        options:
            process_value_channel: 'Temperature'
            setpoint_channel: 'Current'
            timestep: 100
        connect:
            process_value: process_control_dummy
            setpoint: process_control_dummy

hardware:
    # Main NV Simulator Device
    nv_simulator:
        module.Class: 'nv_simulator.qudi_facade.QudiFacade'
        options:
            # Physical parameters
            magnetic_field: [0, 0, 500]  # Gauss, [x, y, z]
            temperature: 300  # Kelvin
            zero_field_splitting: 2.87e9  # Hz
            gyromagnetic_ratio: 2.8025e10  # Hz/T
            t1: 5.0e-3  # T1 relaxation time (s)
            t2: 1.0e-5  # T2 dephasing time (s)
            # Simulation options
            thread_safe: True
            memory_management: True
            optimize_performance: True

    # NV Simulator Microwave Device
    nv_sim_microwave:
        module.Class: 'nv_simulator.microwave_device.NVSimMicrowaveDevice'
        options:
            magnetic_field: [0, 0, 300]  # Gauss, optional, [x, y, z]
            temperature: 300  # Kelvin, optional
            fixed_startup_time: 0.2  # seconds, time to simulate hardware startup delay
        connect:
            simulator: "nv_simulator"

    # NV Simulator Fast Counter (for time-resolved measurements)
    nv_sim_fastcounter:
        module.Class: 'nv_simulator.fast_counter.NVSimFastCounter'
        options:
            gated: False
            photon_rate: 100000  # Simulated maximum photon count rate in cps
            noise_factor: 0.1    # Relative amplitude of Poisson noise
            dark_counts: 200     # Dark counts per second
            time_jitter: 0.5e-9  # Timing jitter in seconds
        connect:
            simulator: "nv_simulator"

    # NV Simulator Pulser (for pulse sequences)
    nv_sim_pulser:
        module.Class: 'nv_simulator.pulser.NVSimPulser'
        options:
            force_sequence_option: False
            save_samples: False
            laser_channel: 'd_ch1'
            microwave_channel: 'd_ch2'
            default_sample_rate: 1.0e9
        connect:
            simulator: "nv_simulator"

    # NV Simulator Scanning Probe (for confocal microscopy)
    nv_sim_scanner:
        module.Class: 'nv_simulator.scanning_probe.NVSimScanningProbe'
        options:
            position_ranges:
                x: [0, 100e-6]
                y: [0, 100e-6]
                z: [-50e-6, 50e-6]
            frequency_ranges:
                x: [1, 1000]
                y: [1, 1000]
                z: [1, 500]
            resolution_ranges:
                x: [1, 1000]
                y: [1, 1000]
                z: [2, 500]
            position_accuracy:
                x: 10e-9
                y: 10e-9
                z: 50e-9
            nv_density: 1e15  # NV density in 1/m^3
        connect:
            simulator: nv_simulator

    # NV Simulator Finite Sampler (for ODMR and other measurements)
    nv_sim_finite_sampler:
        module.Class: 'nv_simulator.finite_sampler.NVSimFiniteSampler'
        options:
            simulation_mode: 'ODMR'
            sample_rate_limits: [1, 1e6]
            frame_size_limits: [1, 1e8]
            channel_units:
                'APD counts': 'c/s'
                'Photodiode': 'V'
        connect:
            simulator: nv_simulator

    # NV Simulator Laser
    nv_sim_laser:
        module.Class: 'nv_simulator.laser.NVSimLaser'
        options:
            wavelength: 532  # Laser wavelength in nm
            max_power: 100.0  # Maximum laser power in mW
            power_noise: 0.01  # Relative power noise
        connect:
            simulator: nv_simulator

    # Kept hardware modules that don't have simulator replacements
    camera_dummy:
        module.Class: 'dummy.camera_dummy.CameraDummy'

    switch_dummy:
        module.Class: 'dummy.switch_dummy.SwitchDummy'
        options:
            switches:
                one: ['off', 'on']
                two: ['down', 'up']

    spectrometer_dummy:
        module.Class: 'dummy.spectrometer_dummy.SpectrometerDummy'

    # Data instream dummy for time series
    instream_dummy:
        module.Class: 'dummy.data_instream_dummy.InStreamDummy'
        options:
            channel_names:
                - 'NV Fluorescence'
                - 'Laser Power'
                - 'Temperature'
            channel_units:
                - 'c/s'
                - 'mW'
                - 'K'
            channel_signals:
                - 'counts'
                - 'sine'
                - 'sine'
            data_type: 'float64'
            sample_timing: 'CONSTANT'

    process_control_dummy:
        module.Class: 'dummy.process_control_dummy.ProcessControlDummy'
        options:
            process_value_channels:
                Temperature:
                    unit: 'K'
                    limits: [0, .inf]
                    dtype: float
            setpoint_channels:
                Current:
                    unit: 'A'
                    limits: [-5, 5]
                    dtype: float