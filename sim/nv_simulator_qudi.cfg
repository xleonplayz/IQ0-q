# NV Simulator Configuration for Qudi
#
# This configuration file sets up a complete virtual Qudi system using the NV center simulator.
# It provides hardware interfaces for all major components needed for typical NV center experiments:
# - Microwave source for ODMR
# - Fast counter for photon counting
# - Pulser for quantum control
# - Scanning probe for confocal microscopy
# - Laser controller for optical excitation
#
# Simply use this file as your Qudi configuration to run a completely simulated NV center setup
# for training, development, and testing.

global:
    # Optional parameters that can be used by multiple modules
    startup:
        # Optional list of modules to load on startup
        gui: ['manager', 'odmrgui', 'scannergui', 'pulsedmeasgui']
        logic: ['taskrunner', 'scannerlogic', 'odmrlogic', 'pulsedmasterlogic']
        hardware: ['nv_facade']

hardware:
    # Core facade that manages all simulator resources
    nv_facade:
        module.Class: 'qudi_interface.hardware.QudiFacade'
        # Global environment parameters
        simulator:
            magnetic_field: [0, 0, 100]  # Magnetic field in Gauss [Bx, By, Bz]
            temperature: 300  # Temperature in Kelvin
        # Confocal scanner parameters
        confocal:
            lattice:
                nv_density: 1.0  # NV centers per cubic micrometer
                size: [50e-6, 50e-6, 50e-6]  # Size of the diamond sample in meters
            laser:
                wavelength: 532e-9  # Laser wavelength in meters
                numerical_aperture: 0.8  # Objective NA
                power: 1.0  # Normalized laser power (0-1)

    # Microwave source for ODMR experiments
    nv_microwave:
        module.Class: 'qudi_interface.hardware.NVSimMicrowaveDevice'
        nv_facade: 'nv_facade'
        magnetic_field: [0, 0, 100]  # Magnetic field in Gauss [Bx, By, Bz]
        field_inhomogeneity: 0.01  # Relative field inhomogeneity

    # Fast counter for photon counting
    nv_fast_counter:
        module.Class: 'qudi_interface.hardware.NVSimFastCounter'
        nv_facade: 'nv_facade'
        bin_width_s: 1e-9  # 1 ns bin width
        record_length_s: 1e-6  # 1 Î¼s record length
        detection_efficiency: 0.1  # 10% detection efficiency

    # Pulser for quantum control experiments
    nv_pulser:
        module.Class: 'qudi_interface.hardware.NVSimPulser'
        nv_facade: 'nv_facade'
        active_analog_channels: ['a_ch1', 'a_ch2']
        active_digital_channels: ['d_ch1', 'd_ch2']

    # Scanning probe for confocal microscopy
    nv_scanning_probe:
        module.Class: 'qudi_interface.hardware.NVSimScanningProbe'
        nv_facade: 'nv_facade'
        scanner_range:
            x: [-50e-6, 50e-6]  # Range in meters
            y: [-50e-6, 50e-6]
            z: [-50e-6, 50e-6]
        initial_position:
            x: 0.0
            y: 0.0
            z: 0.0

    # Laser controller for optical excitation
    nv_laser:
        module.Class: 'qudi_interface.hardware.NVSimLaser'
        nv_facade: 'nv_facade'
        power_range: [0.0, 100.0]  # Power range in mW
        initial_power: 30.0  # Initial power in mW

logic:
    # Task runner for background tasks
    taskrunner:
        module.Class: 'taskrunner.TaskRunnerLogic'
        tasks:
            dummy:
                module: 'dummy'
                priority: 0

    # ODMR logic for spectroscopy experiments
    odmrlogic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            odmrcounter: 'nv_fast_counter'
            fitlogic: 'fitlogic'
            microwave: 'nv_microwave'
            savelogic: 'savelogic'
            taskrunner: 'taskrunner'

    # Scanner logic for confocal microscopy
    scannerlogic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        connect:
            scanner_hw: 'nv_scanning_probe'
            data_logic: 'scanning_data_logic'
            optimize_logic: 'scanning_optimize_logic'
            savelogic: 'savelogic'

    # Data handling logic for scanning
    scanning_data_logic:
        module.Class: 'scanning_data_logic.ScanningDataLogic'
        connect:
            savelogic: 'savelogic'

    # Optimization logic for scanner
    scanning_optimize_logic:
        module.Class: 'scanning_optimize_logic.ScanningOptimizeLogic'
        connect:
            scannerlogic: 'scannerlogic'
            savelogic: 'savelogic'

    # Pulsed measurement logic for quantum control experiments
    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    # Pulsed measurement sublogic
    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: 'nv_fast_counter'
            pulseanalysislogic: 'pulseanalysislogic'
            pulseextractionlogic: 'pulseextractionlogic'
            pulsegenerator: 'nv_pulser'
            savelogic: 'savelogic'
            microwave: 'nv_microwave'

    # Sequence generator sublogic
    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        connect:
            pulsegenerator: 'nv_pulser'

    # Pulse analysis sublogic
    pulseanalysislogic:
        module.Class: 'pulsed.pulse_analyzer.PulseAnalyzer'

    # Pulse extraction sublogic
    pulseextractionlogic:
        module.Class: 'pulsed.pulse_extractor.PulseExtractor'

    # Fit logic for data analysis
    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    # Save logic for data storage
    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'
        unix_data_directory: 'Data'
        log_into_daily_directory: True

gui:
    # Main Qudi manager GUI
    manager:
        module.Class: 'manager.managergui.ManagerGui'

    # ODMR GUI for spectroscopy
    odmrgui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmrlogic: 'odmrlogic'

    # Scanner GUI for confocal microscopy
    scannergui:
        module.Class: 'scanning.scannergui.ScannerGui'
        connect:
            scannerlogic: 'scannerlogic'

    # Pulsed measurement GUI for quantum control
    pulsedmeasgui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'